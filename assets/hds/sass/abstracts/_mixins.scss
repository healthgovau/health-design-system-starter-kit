// When called via @include name(), the mixin will render CSS selectors

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$opacity-ie+")";
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin rgba-background($color, $opacity: 1) {
  background-color: rgba($color, $opacity);
}

// TODO
// flexbox layout generation with grid failover
// separate card from layout so that the dom might be class="health-card health-flex-thirds col-xs-4"


// From NSW Design System
@mixin pseudo-clickable-block {
  &::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    // z-index: map-get($z-index, low);
  }
}

// generates modifer classes in the bem syntax
@mixin helper-classes($attribute, $map) {

  @each $modifier,
  $value in $map {
    &--#{$modifier} {
      #{$attribute}: get-mapped-value($modifier, $map) !important;
    }
  }
}

// When called via @include name(), the mixin will render CSS selectors

// The "chevron" mixin is based on the CSS for the chevron of the HDS "figure".
// @see https://designsystem.health.gov.au/components/detail/figure.html .
@mixin chevron($left-or-right-side, $colour) {
  content: ' ';
  position: absolute;
  @include AU-space(margin-top, 0);
  @include AU-space($left-or-right-side, 1unit);
  @include AU-space(width, 1unit);
  @include AU-space(height, 1unit);
  background-image: url("data:image/svg+xml,%3Csvg xmlns= 'http://www.w3.org/2000/svg' viewBox= '0 0 128 128' %3E%3Cpath fill= '%23"+ $colour + "' d= 'M64 0l64 64-8 8-64-64' /%3E%3Cpath fill= '%23"+ $colour + "' d= 'M64 0l8 8-64 64L0 64' /%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: center;
  z-index: 101;
}

@mixin chevron-down($left-or-right-side, $colour) {
  @include chevron($left-or-right-side, $colour);
  @include AU-space(margin-top, 0.3unit);
  transform: rotate(180deg);
}

@mixin chevron-right($left-or-right-side, $colour) {
  @include chevron($left-or-right-side, $colour);
  @include AU-space(margin-top, 0.3unit);
  @include AU-space($left-or-right-side, 1.25unit);
  transform: rotate(90deg);
}

@mixin chevron-left($left-or-right-side, $colour) {
  @include chevron($left-or-right-side, $colour);
  @include AU-space(margin-top, 0.3unit);
  @include AU-space($left-or-right-side, 1.25unit);
  transform: rotate(-90deg);
}

/// Generate coloured background.
/// Supports single colour and bicolour gradient backgrounds.
/// @param {string} $colour_a - A colour value (e.g. white, #ffffff, rgb(255, 255, 255)).
/// @param {string} $colour_b - A colour value (e.g. black, #000, rgb(0, 0, 0)).
/// @param {string} $angle - Gradient angle expressed either in degrees (e.g. 105deg) or as texts (e.g. to right, to bottom).
@mixin background-style($colour_a: null, $colour_b: null, $angle: to right) {
  @if $colour_a and $colour_b {
    background-color: $colour_a;
    background: linear-gradient($angle, $colour_a, $colour_b);
  }

  @else if $colour_a {
    background: $colour_a;
  }

  @else {
    @error "Something went wrong with the background-style mixin. Check the mixin arguments and try again.";
  }
}